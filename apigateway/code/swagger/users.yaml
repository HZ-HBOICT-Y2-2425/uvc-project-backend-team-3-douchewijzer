swagger: "2.0"
info:
  title: "Users Microservice API"
  version: "1.0.0"
paths:
  /:
    get:
      summary: "Retrieve a list of users"
      tags:
        - Users
      responses:
        200:
          description: "A list of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: integer
                      description: "The user ID"
                    userName:
                      type: string
                      description: "The user name"
                    userEmail:
                      type: string
                      description: "The user email"
  /register:
    post:
      summary: "Register a new user"
      tags:
        - Users
      parameters:
        - in: query
          name: email
          required: true
          description: "The user email"
          schema:
            type: string
        - in: query
          name: userImage
          description: "The user image URL"
          schema:
            type: string
        - in: query
          name: name
          required: true
          description: "The user name"
          schema:
            type: string
        - in: query
          name: password
          required: true
          description: "The user password"
          schema:
            type: string
        - in: query
          name: coins
          description: "The user coins"
          schema:
            type: integer
        - in: query
          name: userMinutes
          description: "The user minutes"
          schema:
            type: integer
      responses:
        201:
          description: "User registered successfully"
        400:
          description: "Email, name, and password are required"
        409:
          description: "Duplicate entry for email"
  /login:
    post:
      summary: "Login a user"
      tags:
        - Users
      parameters:
        - in: query
          name: email
          required: true
          description: "The user email"
          schema:
            type: string
        - in: query
          name: password
          required: true
          description: "The user password"
          schema:
            type: string
      responses:
        200:
          description: "User logged in successfully"
        401:
          description: "Invalid password"
        404:
          description: "Email not found"
  /verify-token:
    get:
      summary: "Verify JWT token"
      tags:
        - Users
      responses:
        200:
          description: "Token is valid"
        401:
          description: "Access Denied"
        400:
          description: "Invalid Token"
  /preferences:
    get:
      summary: "Retrieve a list of user preferences"
      tags:
        - Users
      responses:
        200:
          description: "A list of user preferences"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: integer
                      description: "The user ID"
                    leaderbordNotificationPreference:
                      type: boolean
                      description: "The leaderboard notification preference"
                    leaderbordUploadPreference:
                      type: boolean
                      description: "The leaderboard upload preference"
                    timerSetting:
                      type: integer
                      description: "The timer setting"
                    equipped_item:
                      type: integer
                      description: "The equipped item ID"
  /owned-items:
    get:
      summary: "Retrieve a list of owned items"
      tags:
        - Users
      responses:
        200:
          description: "A list of owned items"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: integer
                      description: "The user ID"
                    badgeID:
                      type: integer
                      description: "The badge ID"
                    itemPrice:
                      type: integer
                      description: "The item price"
  /{userID}:
    get:
      summary: "Retrieve a specific user"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
      responses:
        200:
          description: "A user item"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: integer
                    description: "The user ID"
                  userName:
                    type: string
                    description: "The user name"
                  userEmail:
                    type: string
                    description: "The user email"
        404:
          description: "User item not found"
  /{userID}/preferences:
    get:
      summary: "Retrieve a specific user's preferences"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
      responses:
        200:
          description: "User preferences"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: integer
                    description: "The user ID"
                  leaderbordNotificationPreference:
                    type: boolean
                    description: "The leaderboard notification preference"
                  leaderbordUploadPreference:
                    type: boolean
                    description: "The leaderboard upload preference"
                  timerSetting:
                    type: integer
                    description: "The timer setting"
                  equipped_item:
                    type: integer
                    description: "The equipped item ID"
        404:
          description: "User preferences not found"
    put:
      summary: "Update a specific user's preferences"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
        - in: body
          name: preferences
          description: "The new user preferences"
          schema:
            type: object
            properties:
              leaderbordNotificationPreference:
                type: boolean
              leaderbordUploadPreference:
                type: boolean
              timerSetting:
                type: integer
              equipped_item:
                type: integer
      responses:
        200:
          description: "User preferences updated successfully"
        404:
          description: "User preferences not found"
  /{userID}/owned-items:
    get:
      summary: "Retrieve a specific user's owned items"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
      responses:
        200:
          description: "User owned items"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userID:
                      type: integer
                      description: "The user ID"
                    badgeID:
                      type: integer
                      description: "The badge ID"
                    itemPrice:
                      type: integer
                      description: "The item price"
        404:
          description: "Owned items not found"
    put:
      summary: "Update a specific user's owned items"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
        - in: body
          name: ownedItems
          description: "The new owned items"
          schema:
            type: object
            properties:
              badgeID:
                type: integer
              itemPrice:
                type: integer
      responses:
        200:
          description: "Owned item updated successfully"
        404:
          description: "Owned item not found"
  /{userID}/update:
    put:
      summary: "Update a specific user"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
        - in: query
          name: userName
          description: "The new user name"
          schema:
            type: string
        - in: query
          name: userEmail
          description: "The new user email"
          schema:
            type: string
        - in: query
          name: userImage
          description: "The new user image URL"
          schema:
            type: string
        - in: query
          name: password
          description: "The new user password"
          schema:
            type: string
        - in: query
          name: coins
          description: "The new user coins"
          schema:
            type: integer
        - in: query
          name: userMinutes
          description: "The new user minutes"
          schema:
            type: integer
      responses:
        200:
          description: "User item updated successfully"
        400:
          description: "No fields to update"
        404:
          description: "User item not found"
  /{userID}/delete:
    delete:
      summary: "Delete a specific user"
      tags:
        - Users
      parameters:
        - in: path
          name: userID
          required: true
          description: "The user ID"
          schema:
            type: integer
      responses:
        200:
          description: "User item deleted"
        404:
          description: "User item not found"
definitions:
  User:
    type: object
    properties:
      userID:
        type: integer
        description: "The user ID"
      userName:
        type: string
        description: "The user name"
      userEmail:
        type: string
        description: "The user email"
  UserPreferences:
    type: object
    properties:
      userID:
        type: integer
        description: "The user ID"
      leaderbordNotificationPreference:
        type: boolean
        description: "The leaderboard notification preference"
      leaderbordUploadPreference:
        type: boolean
        description: "The leaderboard upload preference"
      timerSetting:
        type: integer
        description: "The timer setting"
      equipped_item:
        type: integer
        description: "The equipped item ID"
  OwnedItem:
    type: object
    properties:
      userID:
        type: integer
        description: "The user ID"
      badgeID:
        type: integer
        description: "The badge ID"
      itemPrice:
        type: integer
        description: "The item price"
